"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import unittest
import math
import gas_mileage


class TestCalculateMPG(unittest.TestCase):
    def test001_calculateMPGExists(self):
        self.assertTrue('calculateMPG' in dir(gas_mileage),
                        'Function "calculateMPG" is not defined, check your spelling')
        return

    def test002_milesPerGallonCalculate(self):
        notebook = [
            {'date': '01/01/2017', 'miles': 300.0, 'gallons': 10.0},
            {'date': '01/05/2017', 'miles': 182.0, 'gallons': 7.0},
            {'date': '01/15/2017', 'miles': 240.0, 'gallons': 9.6}
        ]
        expected = 27.14
        actual = gas_mileage.calculateMPG(notebook)
        self.assertAlmostEqual(expected, actual, 2,
            'Your calculateMPG function returned %s which is not close enough to %s' % (actual, expected))
        return

    def test003_milesPerGallonCalculate(self):
        notebook = []
        expected = 0.0
        actual = gas_mileage.calculateMPG(notebook)
        self.assertAlmostEqual(expected, actual, 2,
            'Your calculateMPG function returned %s which is not close enough to %s' % (actual, expected))
        return

    def test004_milesPerGallonCalculate(self):
        notebook = [
            {'date': '01/01/2017', 'miles': 300.0, 'gallons': 10.0}
        ]
        expected = 30.0
        actual = gas_mileage.calculateMPG(notebook)
        self.assertAlmostEqual(expected, actual, 2,
            'Your calculateMPG function returned %s which is not close enough to %s' % (actual, expected))

    def test005_milesPerGallonCalculate(self):
        notebook = [
            {'date': '01/01/2017', 'miles': 300.0, 'gallons': 0.0}
        ]
        expected = 0.0
        actual = gas_mileage.calculateMPG(notebook)
        self.assertAlmostEqual(expected, actual, 2,
            'Your calculateMPG function returned %s which is not close enough to %s' % (actual, expected))

    def test006_milesPerGallonCalculate(self):
        notebook = [
            {'date': '01/01/2017', 'miles': 0.0, 'gallons': 10.0}
        ]
        expected = 0.0
        actual = gas_mileage.calculateMPG(notebook)
        self.assertAlmostEqual(expected, actual, 2,
            'Your calculateMPG function returned %s which is not close enough to %s' % (actual, expected))


    def test007_milesPerGallonCalculate(self):
        notebook = [
            {'date': '01/01/2017', 'miles': 300.0, 'gallons': 10.0},
            {'date': '01/25/2017', 'miles': 200.0, 'gallons': 8.0}
        ]
        expected = 27.78
        actual = gas_mileage.calculateMPG(notebook)
        self.assertAlmostEqual(expected, actual, 2,
            'Your calculateMPG function returned %s which is not close enough to %s' % (actual, expected))


    def test008_milesPerGallonCalculate(self):
        notebook = [
            {'date': '01/01/2017', 'miles': 270.8, 'gallons': 10.2},
            {'date': '01/02/2017', 'miles': 316.0, 'gallons': 13.0},
            {'date': '01/03/2017', 'miles': 148.0, 'gallons': 7.0},
            {'date': '01/04/2017', 'miles': 172.0, 'gallons': 8.3},
            {'date': '01/05/2017', 'miles': 215.0, 'gallons': 9.4},
            {'date': '01/06/2017', 'miles': 312.0, 'gallons': 12.4}
        ]
        expected = 23.78
        actual = gas_mileage.calculateMPG(notebook)
        self.assertAlmostEqual(expected, actual, 2,
            'Your calculateMPG function returned %s which is not close enough to %s' % (actual, expected))

if __name__ == '__main__':
    unittest.main()
