"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import unittest
import gas_mileage


class TestCalculateMPGAction(unittest.TestCase):
    def input_replacement(self, prompt):
        self.assertFalse(self.too_many_inputs)
        self.input_given_prompt = prompt
        r = self.input_response_list[self.input_response_index]
        self.input_response_index += 1
        if self.input_response_index >= len(self.input_response_list):
            self.input_response_index = 0
            self.too_many_inputs = True
        return r

    def print_replacement(self, *text, **kwargs):
        line = " ".join(text) + "\n"
        self.printed_lines.append(line)
        return

    def setUp(self):
        self.too_many_inputs = False
        self.input_given_prompt = None
        self.input_response_index = 0
        self.input_response_list = [""]
        gas_mileage.input = self.input_replacement

        self.printed_lines = []
        gas_mileage.print = self.print_replacement
        return

    def test001_calculateMPGActionExists(self):
        self.assertTrue('calculateMPGAction' in dir(gas_mileage),
                        'Function "calculateMPGAction" is not defined, check your spelling')
        return

    def test002_calculateMPGActionDoesNotUpdate(self):
        from gas_mileage import calculateMPGAction
        notebook = []
        expected = []

        self.input_response_list = ["???"]
        calculateMPGAction(notebook)
        self.assertListEqual(expected, notebook, "Your calculateMPGAction made changes to the notebook when it shouldn't")
        self.assertGreaterEqual(len(self.printed_lines), 1, 'Make sure to print a message to the user when no trips being recorded')

    def test003_calculateMPGActionPrintLines(self):
        from gas_mileage import calculateMPGAction
        notebook = [
            {'date': "01/01/17", 'miles': 100.0, 'gallons': 5.0},
            {'date': "01/02/17", 'miles': 300.0, 'gallons': 10.0}
        ]
        expected = [
            {'date': "01/01/17", 'miles': 100.0, 'gallons': 5.0},
            {'date': "01/02/17", 'miles': 300.0, 'gallons': 10.0}
        ]

        self.input_response_list = ["???"]
        calculateMPGAction(notebook)
        self.assertListEqual(expected, notebook, "Your calculateMPGAction made changes to the notebook when it shouldn't")
        self.assertGreaterEqual(len(self.printed_lines), 1, 'Nothing was printed to the user')

        printed_text = "".join(self.printed_lines)

        self.assertIn("average", printed_text.lower(), 'Did not find the word "average" in the printed text. Case does not matter')
        self.assertIn("26.6", printed_text, 'Did you round your number?')
        self.assertIn("mpg", printed_text.lower(), 'Did not find the word "MPG" in the printed text. Case does not matter')

    def test004_calculateMPGActionPrintLines(self):
        from gas_mileage import calculateMPGAction
        notebook = [
            {'date': "01/01/17", 'miles': 200.0, 'gallons': 8.0},
            {'date': "01/25/17", 'miles': 300.0, 'gallons': 10.0}
        ]
        expected = [
            {'date': "01/01/17", 'miles': 200.0, 'gallons': 8.0},
            {'date': "01/25/17", 'miles': 300.0, 'gallons': 10.0}
        ]

        self.input_response_list = ["???"]
        calculateMPGAction(notebook)
        self.assertListEqual(expected, notebook, "Your calculateMPGAction made changes to the notebook when it shouldn't")
        self.assertGreaterEqual(len(self.printed_lines), 1, 'Nothing was printed to the user')

        printed_text = "".join(self.printed_lines)

        self.assertIn("average", printed_text.lower(), 'Did not find the word "average" in the printed text. Case does not matter')
        self.assertIn("27.7", printed_text, 'Did you round your number?')
        self.assertIn("mpg", printed_text.lower(), 'Did not find the word "MPG" in the printed text. Case does not matter')



if __name__ == '__main__':
    unittest.main()
