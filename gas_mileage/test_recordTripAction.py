"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import unittest
import gas_mileage


class TestRecordTripAction(unittest.TestCase):
    def input_replacement(self, prompt):
        self.assertFalse(self.too_many_inputs)
        self.input_given_prompt = prompt
        r = self.input_response_list[self.input_response_index]
        self.input_response_index += 1
        if self.input_response_index >= len(self.input_response_list):
            self.input_response_index = 0
            self.too_many_inputs = True
        return r

    def print_replacement(self, *text, **kwargs):
        line = " ".join(text) + "\n"
        self.printed_lines.append(line)
        return

    def setUp(self):
        self.too_many_inputs = False
        self.input_given_prompt = None
        self.input_response_index = 0
        self.input_response_list = [""]
        gas_mileage.input = self.input_replacement

        self.printed_lines = []
        gas_mileage.print = self.print_replacement
        return

    def test001_recordTripActionExists(self):
        self.assertTrue('recordTripAction' in dir(gas_mileage),
                        'Function "recordTripAction" is not defined, check your spelling')
        return

    def test002_recordTripAddsTrip(self):
        from gas_mileage import recordTripAction
        notebook = []

        date = '01/01/17'
        miles = "300"
        gallons = "10"
        expected = [{'date': date, 'miles': 300.0, 'gallons': 10.0}]

        self.input_response_list = [date + "\n", miles + "\n", gallons + "\n"]
        recordTripAction(notebook)
        self.assertTrue(len(notebook) == 1)
        self.assertDictEqual(notebook[0], expected[0])

        self.assertGreaterEqual(len(self.printed_lines), 1, 'You should print a message to the user.')

    def test003_recordTripAddsTripBadInput(self):
        from gas_mileage import recordTripAction
        notebook = []

        date = '01/01/17'
        miles = "300"
        gallons = "10"
        expected = [{'date': date, 'miles': 300.0, 'gallons': 10.0}]

        self.input_response_list = ["", "\t", date + "\n", "", "-17", "0", "hello", miles + "\n", "", "-17", "0",
                                    "hello", gallons + "\n"]
        recordTripAction(notebook)
        self.assertTrue(len(notebook) == 1)
        self.assertDictEqual(notebook[0], expected[0])

        self.assertGreaterEqual(len(self.printed_lines), 1, 'You should print a message to the user.')

    def test004_recordTripAddsMultipleTrips(self):
        from gas_mileage import recordTripAction
        notebook = []
        expected = []

        # trip 1
        date = '01/01/17'
        miles = "300"
        gallons = "10"
        expected.append({'date': date, 'miles': 300.0, 'gallons': 10.0})

        # bad inputs
        self.input_response_list = ["", "\t", date + "\n", "", "-17", "0", "hello", miles + "\n", "", "-17", "0",
                                    "hello", gallons + "\n"]
        recordTripAction(notebook)
        self.assertTrue(len(notebook) == 1)
        self.assertDictEqual(notebook[0], expected[0])

        self.assertGreaterEqual(len(self.printed_lines), 1, 'You should print a message to the user.')


        # trip 2
        date = '01/02/17'
        miles = "150.3"
        gallons = "5.7"
        expected.append({'date': date, 'miles': 150.3, 'gallons': 5.7})

        # reset input counters
        self.too_many_inputs = False
        self.input_response_index = 0
        self.printed_lines = []

        # no bad inputs
        self.input_response_list = [date, miles, gallons]
        recordTripAction(notebook)
        self.assertTrue(len(notebook) == 2)
        self.assertDictEqual(notebook[1], expected[1])

        self.assertGreaterEqual(len(self.printed_lines), 1, 'You should print a message to the user each time they record a trip')


if __name__ == '__main__':
    unittest.main()
