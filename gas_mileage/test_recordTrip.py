"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import unittest
import random
import gas_mileage


class TestRecordTrip(unittest.TestCase):
    def test001_recordTripExists(self):
        self.assertTrue('recordTrip' in dir(gas_mileage),
                        'Function "recordTrip" is not defined, check your spelling')
        return

    def test002_recordOneTrip(self):
        # start with empty trip log
        notebook = []
        date = "01/01/2017"
        miles = 300.0
        gallons = 10.0

        # record a trip
        gas_mileage.recordTrip(notebook, date, miles, gallons)

        # check total number of recorded trips
        number_of_trips = len(notebook)
        self.assertTrue(number_of_trips == 1, 'We recorded 1 trip, your notebook had %d' % number_of_trips)

        # get the recorded trip dictionary and check its values
        trip = notebook[0]
        self.assertDictEqual({'date': date, 'miles': miles, 'gallons': gallons}, trip)


    def test003_recordMultipleTrips(self):
        # start with empty trip log
        notebook = []

        # choose number of trips to generate
        total_trips = random.randint(10, 20)

        # generate and verify trips
        for i in range(total_trips):
            trip_number = i + 1
            date = 'day' + str(trip_number)
            ratio = random.randint(13, 34)
            miles = float(random.randint(50, 250))
            gallons = float(miles / ratio)

            # record the trip
            gas_mileage.recordTrip(notebook, date, miles, gallons)

            # count the number of trips recorded so far
            number_of_trips = len(notebook)
            self.assertTrue(number_of_trips == trip_number,
                            'We have recorded %d trips, your notebook had %d' % (trip_number, number_of_trips))

            # get the last trip recorded and verify the values
            trip = notebook[number_of_trips - 1]
            self.assertDictEqual({'date':date, 'miles':miles, 'gallons':gallons}, trip)

        # get the total number of trips and verify it is the correct number
        number_of_trips = len(notebook)
        self.assertTrue(number_of_trips == total_trips,
                        'We recorded %d trips, your notebook had %d' % (total_trips, number_of_trips))


if __name__ == '__main__':
    unittest.main()
