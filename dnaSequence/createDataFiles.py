"""
Ignore this file.
It is simply a helper to make sure all test files are correct.
It generates the target (tar*.txt), candidate (can*.txt), and
solution (sol*.txt) files for all tests.

If you delete the files, you can simply run this file or
run the test_dnaSequencing.py file to regenerate the data files.

Do not edit this file or the unittests will stop working
"""

import os

def fullPath(filename):
    pathname = os.path.dirname(__file__)
    filepath = os.path.abspath(pathname)
    return os.path.join(filepath, filename)

def listToFile(list, filename):
    fp = fullPath(filename)
    f = open(fp, 'w')
    for line in list:
        f.write(line + "\n")
    f.close()

def createCaseEasy():
    target = ['ABCDEFG']
    listToFile(target, 'tar_easy.txt')

    candidates = ['GHHHHHH', 'FGHHHHH', 'EFGHHHH', 'CDEFGHH', 'DEFGHHH']
    listToFile(candidates, 'can_easy.txt')

    solution = ['ABCDEFGHH']
    listToFile(solution, 'sol_easy.txt')


def createCase0():
    target = ['TTATAGTGATATACGTGCTTAGGTAGTGCAGAGACACAACTTATAGAGTGAGGCCAGCTCACGAGCTCTAGAAGCCCAAA']
    listToFile(target, 'tar0.txt')

    candidates = ['TATTGTGCTCTATAGCTCCAGGCACATCCCTTGACGGATTGGGGACTGTCTTGACGAAAGTTCGGAGGTAGAAAAGTCCA',
                  'GACGACACCCTGGCAAAGGTCACGTCATGGGTGGAGTACTTATACCGGCAGCAGAGCGATCTGCTACCTATCTTCATGAT',
                  'CACGAGCTCTAGAAGCCCAAACTGTGACGCAATTGCCGGGCTAAAACTATGCTAAGAAATCCCCATTACCAGAGTCTTAG',
                  'TGAGCCGTTGGGCAGTTAACGGATTTTACTCGTCGCTGCCTGAAGTGCCAAATTTACCAAAAACCGGATAACTTCATGCA',
                  'CTTATAGAGTGAGGCCAGCTCACGAGCTCTAGAAGCCCAAATTGCTACTGTGCCGCTGCGCACCGCATGATCGCAGTCAG',
                  'TTAGAGGAATTGGACGGCACTCGGACACAAGCTCACGCCCCATACTTTAGCACCGAATATCGACTAAGCATAGTTGATCT',
                  'AGCAAGAGTTGGTATCTCTAGGGGCTTCTCCGGACGCAACGACGCGTCTGACAGTTCAGGTTGTTATGACCCGGGTGTGA',
                  'CTATGGTTAGGCAACTTCCACGCTATCCCTCGACCACGGCTCGTGGAGCCGTACCGGTGTATTTTGTTGCTGCTAATATT',
                  'GTAGCACGCAGTTCGAGTCACCCGGAAGCAGCGAAACGTTCGGCAACTACAAACTCCAATCTTGTATTCGGGTGCCTTTT',
                  'CGATTGTCTGTGTTCTGCATGAGCACAATAAGTACAAGTCGAACTGGTATTTACTAAAGTCCGCATATTGTACGGTACGT']
    listToFile(candidates, 'can0.txt')

    solution = ['TTATAGTGATATACGTGCTTAGGTAGTGCAGAGACACAACTTATAGAGTGAGGCCAGCTCACGAGCTCTAGAAGCCCAAATTGCTACTGTGCCGCTGCGCACCGCATGATCGCAGTCAG']
    listToFile(solution, 'sol0.txt')


def createCase1():
    target = ['GTCGCGTTCAGGCGCATTAAGTTAGTCGGA']
    listToFile(target, 'tar1.txt')

    candidates = ['TCAGGCGCATTAAGTTAGTCGGAGCACACG', 'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT',
                  'GCGCATTAAGTTAGTCGGAGCACACGATAG', 'GATGGGATTCCACTGCTCTGGTCGCGTTCA',
                  'AGATGGGATTCCACTGCTCTGGTCGCGTTC', 'CGTTCAGGCGCATTAAGTTAGTCGGAGCAC',
                  'CTAAGATGGGATTCCACTGCTCTGGTCGCG', 'TACATGAAGCGCTACGTCTTATTGCGCTGG',
                  'TCGGAGCACACGATAGTGTACATGAAGCGC', 'TCGCGTTCAGGCGCATTAAGTTAGTCGGAG',
                  'ACGATAGTGTACATGAAGCGCTACGTCTTA', 'GATGGGATTCCACTGCTCTGGTCGCGTTCA',
                  'TTCAGGCGCATTAAGTTAGTCGGAGCACAC', 'AGTTAGTCGGAGCACACGATAGTGTACATG',
                  'TCGGAGCACACGATAGTGTACATGAAGCGC', 'TAGTGTACATGAAGCGCTACGTCTTATTGC',
                  'GATTCCACTGCTCTGGTCGCGTTCAGGCGC', 'TGTACATGAAGCGCTACGTCTTATTGCGCT',
                  'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT', 'TTAGTCGGAGCACACGATAGTGTACATGAA',
                  'TACATGAAGCGCTACGTCTTATTGCGCTGG', 'GATTCCACTGCTCTGGTCGCGTTCAGGCGC',
                  'AGTCGGAGCACACGATAGTGTACATGAAGC', 'TAGTGTACATGAAGCGCTACGTCTTATTGC',
                  'CACTAAGATGGGATTCCACTGCTCTGGTCG', 'GATAGTGTACATGAAGCGCTACGTCTTATT',
                  'TGGTCGCGTTCAGGCGCATTAAGTTAGTCG', 'AAGTTAGTCGGAGCACACGATAGTGTACAT',
                  'AGTGTACATGAAGCGCTACGTCTTATTGCG', 'AAGATGGGATTCCACTGCTCTGGTCGCGTT',
                  'GGCGCATTAAGTTAGTCGGAGCACACGATA', 'AAGATGGGATTCCACTGCTCTGGTCGCGTT',
                  'ACACGATAGTGTACATGAAGCGCTACGTCT', 'CACTAAGATGGGATTCCACTGCTCTGGTCG',
                  'AAGTTAGTCGGAGCACACGATAGTGTACAT', 'GTTCAGGCGCATTAAGTTAGTCGGAGCACA',
                  'CTGCTCTGGTCGCGTTCAGGCGCATTAAGT', 'GGGATTCCACTGCTCTGGTCGCGTTCAGGC',
                  'GTCGGAGCACACGATAGTGTACATGAAGCG', 'GGAGCACACGATAGTGTACATGAAGCGCTA',
                  'ACTAAGATGGGATTCCACTGCTCTGGTCGC', 'GATAGTGTACATGAAGCGCTACGTCTTATT',
                  'CATTAAGTTAGTCGGAGCACACGATAGTGT', 'GATGGGATTCCACTGCTCTGGTCGCGTTCA',
                  'AGTGTACATGAAGCGCTACGTCTTATTGCG', 'TCGGAGCACACGATAGTGTACATGAAGCGC',
                  'ACACGATAGTGTACATGAAGCGCTACGTCT', 'ACTGCTCTGGTCGCGTTCAGGCGCATTAAG',
                  'ACGATAGTGTACATGAAGCGCTACGTCTTA', 'GCACACGATAGTGTACATGAAGCGCTACGT',
                  'GATAGTGTACATGAAGCGCTACGTCTTATT', 'TCGCGTTCAGGCGCATTAAGTTAGTCGGAG',
                  'CTGCTCTGGTCGCGTTCAGGCGCATTAAGT', 'GTACATGAAGCGCTACGTCTTATTGCGCTG',
                  'ATTAAGTTAGTCGGAGCACACGATAGTGTA', 'CACACGATAGTGTACATGAAGCGCTACGTC',
                  'GGGATTCCACTGCTCTGGTCGCGTTCAGGC', 'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT',
                  'TCTGGTCGCGTTCAGGCGCATTAAGTTAGT', 'AGATGGGATTCCACTGCTCTGGTCGCGTTC',
                  'ATAGTGTACATGAAGCGCTACGTCTTATTG', 'AGGCGCATTAAGTTAGTCGGAGCACACGAT',
                  'ACGATAGTGTACATGAAGCGCTACGTCTTA', 'AGGCGCATTAAGTTAGTCGGAGCACACGAT',
                  'TCAGGCGCATTAAGTTAGTCGGAGCACACG', 'CGCGTTCAGGCGCATTAAGTTAGTCGGAGC',
                  'GGATTCCACTGCTCTGGTCGCGTTCAGGCG', 'TGGGATTCCACTGCTCTGGTCGCGTTCAGG',
                  'TAAGATGGGATTCCACTGCTCTGGTCGCGT', 'ACGATAGTGTACATGAAGCGCTACGTCTTA',
                  'GAGCACACGATAGTGTACATGAAGCGCTAC', 'ATTCCACTGCTCTGGTCGCGTTCAGGCGCA',
                  'GCTCTGGTCGCGTTCAGGCGCATTAAGTTA', 'AGCACACGATAGTGTACATGAAGCGCTACG',
                  'GCGTTCAGGCGCATTAAGTTAGTCGGAGCA', 'CGCGTTCAGGCGCATTAAGTTAGTCGGAGC',
                  'GTCGGAGCACACGATAGTGTACATGAAGCG', 'GATTCCACTGCTCTGGTCGCGTTCAGGCGC',
                  'TAAGATGGGATTCCACTGCTCTGGTCGCGT', 'GATTCCACTGCTCTGGTCGCGTTCAGGCGC',
                  'TAGTCGGAGCACACGATAGTGTACATGAAG', 'AAGTTAGTCGGAGCACACGATAGTGTACAT',
                  'TCGGAGCACACGATAGTGTACATGAAGCGC', 'ACGATAGTGTACATGAAGCGCTACGTCTTA',
                  'TAGTCGGAGCACACGATAGTGTACATGAAG', 'TTAGTCGGAGCACACGATAGTGTACATGAA',
                  'CACACGATAGTGTACATGAAGCGCTACGTC', 'GCACACGATAGTGTACATGAAGCGCTACGT',
                  'TCGGAGCACACGATAGTGTACATGAAGCGC', 'AGCACACGATAGTGTACATGAAGCGCTACG',
                  'ACACGATAGTGTACATGAAGCGCTACGTCT', 'CACACGATAGTGTACATGAAGCGCTACGTC',
                  'AGATGGGATTCCACTGCTCTGGTCGCGTTC', 'CGTTCAGGCGCATTAAGTTAGTCGGAGCAC',
                  'TAGTGTACATGAAGCGCTACGTCTTATTGC', 'GATGGGATTCCACTGCTCTGGTCGCGTTCA',
                  'TAGTCGGAGCACACGATAGTGTACATGAAG', 'TGGTCGCGTTCAGGCGCATTAAGTTAGTCG',
                  'AGTCGGAGCACACGATAGTGTACATGAAGC', 'CCACTGCTCTGGTCGCGTTCAGGCGCATTA',
                  'CTCTGGTCGCGTTCAGGCGCATTAAGTTAG', 'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT',
                  'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT', 'TAAGATGGGATTCCACTGCTCTGGTCGCGT',
                  'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT', 'GCATTAAGTTAGTCGGAGCACACGATAGTG',
                  'GCGTTCAGGCGCATTAAGTTAGTCGGAGCA', 'ATTCCACTGCTCTGGTCGCGTTCAGGCGCA',
                  'GTGTACATGAAGCGCTACGTCTTATTGCGC', 'ATAGTGTACATGAAGCGCTACGTCTTATTG',
                  'TAAGATGGGATTCCACTGCTCTGGTCGCGT', 'GTTCAGGCGCATTAAGTTAGTCGGAGCACA',
                  'GATTCCACTGCTCTGGTCGCGTTCAGGCGC', 'TAGTGTACATGAAGCGCTACGTCTTATTGC',
                  'AGCACACGATAGTGTACATGAAGCGCTACG', 'ATGGGATTCCACTGCTCTGGTCGCGTTCAG',
                  'GTTAGTCGGAGCACACGATAGTGTACATGA', 'TAAGTTAGTCGGAGCACACGATAGTGTACA',
                  'TGTACATGAAGCGCTACGTCTTATTGCGCT', 'TTAGTCGGAGCACACGATAGTGTACATGAA',
                  'GGTCGCGTTCAGGCGCATTAAGTTAGTCGG', 'AGTCGGAGCACACGATAGTGTACATGAAGC',
                  'GGTCGCGTTCAGGCGCATTAAGTTAGTCGG', 'GAGCACACGATAGTGTACATGAAGCGCTAC',
                  'AGTTAGTCGGAGCACACGATAGTGTACATG', 'ACACGATAGTGTACATGAAGCGCTACGTCT',
                  'GCACACGATAGTGTACATGAAGCGCTACGT', 'CTCTGGTCGCGTTCAGGCGCATTAAGTTAG',
                  'GCTCTGGTCGCGTTCAGGCGCATTAAGTTA', 'AGTGTACATGAAGCGCTACGTCTTATTGCG',
                  'GTTCAGGCGCATTAAGTTAGTCGGAGCACA', 'TCAGGCGCATTAAGTTAGTCGGAGCACACG',
                  'GCACTAAGATGGGATTCCACTGCTCTGGTC']
    listToFile(candidates, 'can1.txt')

    solution = ['GTCGCGTTCAGGCGCATTAAGTTAGTCGGAG']
    listToFile(solution, 'sol1.txt')


def createCase2():
    target = ['CATTATTATGAGGTTTCCCTCCCTAAACTT']
    listToFile(target, 'tar2.txt')

    candidates = ['CCACGGGAATCCATAGTCAGAAATAGTATC', 'ACGACCGTTAACCACATTACCCCGTGGTCG',
                  'ACCCCTAGCCGGCCGATAGAGTGTAAGGAT', 'CGTCGACAGACCACGTTATTTCATTCGGCG',
                  'CCCTAGCCGGCCGATAGAGTGTAAGGATAG', 'TATGAACTTCGGCGGGTACATATGGACTAT',
                  'AGTCAGTGTAAGGTTAACTCCGCATTAGAA', 'AGGCTATGCGCAAGAAAAGCCATACTTCTT',
                  'CTGTCTTCGCCGGGCTCTATTACGGTCGCT', 'AGGGCCTGGAGACAGTCAGTGTAAGGTTAA',
                  'AACGGAGACGCTTTGCCGTACGACTGACCC', 'CACGGTTATGGCTTCTAGCGGTCTTCACCC',
                  'AGGCGTCCCTCCTTAGAGGCCAGGTGTCCG', 'GTTTGCGTCTGGAGGATGAAGCACTATACG',
                  'CTGTGTATGAACTTCGGCGGGTACATATGG', 'CGGTCTTCACCCCCCCAGGCAAGTAGCTTC',
                  'TAATGTCCATGGTGATACCCCTAGCCGGCC', 'CACCCCCCCAGGCAAGTAGCTTCACGCTGA',
                  'GCGTTTCAGAGCATTAATCGGGGGCCGTGT', 'CCCGACACCGGCCTTGCAGGCTATGCGCAA',
                  'GACCCCAAGGGGCGATATTGCACGACCGTT', 'TCGAGCGATAATTGGTGTTCGTTACAGCGT',
                  'GGATAGCAGACCCCCACCTTCGTAAAACAA', 'CCCTCCTTAGAGGCCAGGTGTCCGAACTTC',
                  'TCAGAAATAGTATCACTCCTTATTCCGACT', 'CCCGTGTTAGGCGTCCCTCCTTAGAGGCCA',
                  'GTCTCTTGCGCTTAAATAATCCAGCATCGC', 'CTCCCGTCGACAGACCACGTTATTTCATTC',
                  'CAGACCACGTTATTTCATTCGGCGTTTCTC', 'TAGTATCACTCCTTATTCCGACTCAGAAAG',
                  'CGGACGACCTCTAGGATGTACTACCCTACT', 'ACCGAGAACCGCGGTTATAATTTCACATTA',
                  'CAGTGTAAGGTTAACTCCGCATTAGAAGCC', 'ATGGCTTCTAGCGGTCTTCACCCCCCCAGG',
                  'CGAGAACCGCGGTTATAATTTCACATTATT', 'GCATCGCCTAGCAAAGCAGCTTACGTTCAG',
                  'CAAATCTCACTAATGTCCATGGTGATACCC', 'GGGAATCCATAGTCAGAAATAGTATCACTC',
                  'GTTTGCGTCTGGAGGATGAAGCACTATACG']
    listToFile(candidates, 'can2.txt')

    solution = ['CATTATTATGAGGTTTCCCTCCCTAAACTTATGAACTTCGGCGGGTACATATGGACTAT']
    listToFile(solution, 'sol2.txt')


def createDataFiles():
    createCaseEasy()
    createCase0()
    createCase1()
    createCase2()


if __name__ == "__main__":
    createDataFiles()
