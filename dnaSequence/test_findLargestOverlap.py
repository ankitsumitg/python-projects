"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import unittest
import dnaSequencing

class TestFindLargestOverlap(unittest.TestCase):
    def test001_findLargestOverlapExists(self):
        self.assertTrue('findLargestOverlap' in dir(dnaSequencing),
                        'Function "findLargestOverlap" was not defined, check your spelling')

    def test002_targetStrandEmpty(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('', 'bbb'), -1,
                         'The target strand is blank so the function should return a value of -1')

    def test003_candidateStrandEmpty(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('aaa', ''), -1,
                         'The candidate strand is blank so the function should return a value of -1')

    def test004_bothStrandsEmpty(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('', ''), -1,
                         'Both strands are blank so the function should return a value of -1')

    def test005_strandsAreNotEqualLengths1(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('aa', 'bbb'), -1,
                         'The target and candidate strings are different lengths so the function should return a value of -1')

    def test006_strandsAreNotEqualLengths2(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('aaa', 'bb'), -1,
                         'The target and candidate strings are different lengths so the function should return a value of -1')

    def test007_zeroOverlap(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('aaa', 'bbb'), 0, 'There is no overlap between the strings "aaa" and "bbb"')

    def test008_zeroOverlap(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('abccccba', 'bbccccbb'), 0, 'There is no overlap between the strings "abccccba" and "bbccccbb"')

    def test009_oneOverlap(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('bbbbba', 'abbbbb'), 1, 'There is an overlap of "a" (1 character)')

    def test010_twoOverlap(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('bbbbbab', 'abbbbba'), 2, 'There is an overlap of "ab" (2 characters)')

    def test011_threeOverlap(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('bbbbbabc', 'abcbbbba'), 3, 'There is an overlap of "abc" (3 characters)')

    def test012_partialOverlap(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('abcdefg', 'defgabc'), 4, 'There is an overlap of "defg" (4 characters)')

    def test013_completeOverlap(self):
        from dnaSequencing import findLargestOverlap
        self.assertEqual(findLargestOverlap('aaaaaaaa', 'aaaaaaaa'), 8, 'There is an overlap of "aaaaaaaa" (8 characters)')

if __name__ == '__main__':
    unittest.main()
