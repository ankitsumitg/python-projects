"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import unittest
import dnaSequencing
import createDataFiles
from os.path import isfile

class TestFileToList(unittest.TestCase):
    def setUp(self):
        createDataFiles.createDataFiles()
        self.extrafiles = []

    def tearDown(self):
        from os import remove
        for file in self.extrafiles:
            if isfile(file):
                remove(file)

    def test001_fileToListExists(self):
        self.assertTrue('fileToList' in dir(dnaSequencing),
                        'Function "fileToList" is not defined, check your spelling')

    def test002_openFileTarEasy(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('tar_easy.txt')
        tar_easy_exists = isfile(filename)
        self.assertTrue(tar_easy_exists, 'Could not find file: "tar_easy.txt", did you move or delete it?')
        self.assertListEqual(fileToList(filename), ['ABCDEFG'])

    def test003_openFileTar0(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('tar0.txt')
        tar0_exists = isfile(filename)
        self.assertTrue(tar0_exists, 'Could not find file: "tar0.txt", did you move or delete it?')
        self.assertListEqual(fileToList(filename),
                             ['TTATAGTGATATACGTGCTTAGGTAGTGCAGAGACACAACTTATAGAGTGAGGCCAGCTCACGAGCTCTAGAAGCCCAAA'])

    def test004_openFileTar1(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('tar1.txt')
        tar1_exists = isfile(filename)
        self.assertTrue(tar1_exists, 'Could not find file: "tar1.txt", did you move or delete it?')
        self.assertListEqual(fileToList(filename), ['GTCGCGTTCAGGCGCATTAAGTTAGTCGGA'])

    def test005_openFileTar2(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('tar2.txt')
        tar2_exists = isfile(filename)
        self.assertTrue(tar2_exists, 'Could not find file: "tar2.txt", did you move or delete it?')
        self.assertListEqual(fileToList(filename), ['CATTATTATGAGGTTTCCCTCCCTAAACTT'])

    def test006_openFileCanEasy(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('can_easy.txt')
        tar_easy_exists = isfile(filename)
        self.assertTrue(tar_easy_exists, 'Could not find file: "can_easy.txt", did you move or delete it?')
        self.assertListEqual(fileToList(filename), ['GHHHHHH', 'FGHHHHH', 'EFGHHHH', 'CDEFGHH', 'DEFGHHH'])

    def test007_openFileCan0(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('can0.txt')
        tar0_exists = isfile(filename)
        self.assertTrue(tar0_exists, 'Could not find file: "can0.txt", did you move or delete it?')
        candidate0_list = ['TATTGTGCTCTATAGCTCCAGGCACATCCCTTGACGGATTGGGGACTGTCTTGACGAAAGTTCGGAGGTAGAAAAGTCCA',
                           'GACGACACCCTGGCAAAGGTCACGTCATGGGTGGAGTACTTATACCGGCAGCAGAGCGATCTGCTACCTATCTTCATGAT',
                           'CACGAGCTCTAGAAGCCCAAACTGTGACGCAATTGCCGGGCTAAAACTATGCTAAGAAATCCCCATTACCAGAGTCTTAG',
                           'TGAGCCGTTGGGCAGTTAACGGATTTTACTCGTCGCTGCCTGAAGTGCCAAATTTACCAAAAACCGGATAACTTCATGCA',
                           'CTTATAGAGTGAGGCCAGCTCACGAGCTCTAGAAGCCCAAATTGCTACTGTGCCGCTGCGCACCGCATGATCGCAGTCAG',
                           'TTAGAGGAATTGGACGGCACTCGGACACAAGCTCACGCCCCATACTTTAGCACCGAATATCGACTAAGCATAGTTGATCT',
                           'AGCAAGAGTTGGTATCTCTAGGGGCTTCTCCGGACGCAACGACGCGTCTGACAGTTCAGGTTGTTATGACCCGGGTGTGA',
                           'CTATGGTTAGGCAACTTCCACGCTATCCCTCGACCACGGCTCGTGGAGCCGTACCGGTGTATTTTGTTGCTGCTAATATT',
                           'GTAGCACGCAGTTCGAGTCACCCGGAAGCAGCGAAACGTTCGGCAACTACAAACTCCAATCTTGTATTCGGGTGCCTTTT',
                           'CGATTGTCTGTGTTCTGCATGAGCACAATAAGTACAAGTCGAACTGGTATTTACTAAAGTCCGCATATTGTACGGTACGT']
        self.assertListEqual(fileToList(filename), candidate0_list)

    def test008_openFileCan1(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('can1.txt')
        tar1_exists = isfile(filename)
        self.assertTrue(tar1_exists, 'Could not find file: "can1.txt", did you move or delete it?')
        candidate1_list = ['TCAGGCGCATTAAGTTAGTCGGAGCACACG', 'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT',
                           'GCGCATTAAGTTAGTCGGAGCACACGATAG', 'GATGGGATTCCACTGCTCTGGTCGCGTTCA',
                           'AGATGGGATTCCACTGCTCTGGTCGCGTTC', 'CGTTCAGGCGCATTAAGTTAGTCGGAGCAC',
                           'CTAAGATGGGATTCCACTGCTCTGGTCGCG', 'TACATGAAGCGCTACGTCTTATTGCGCTGG',
                           'TCGGAGCACACGATAGTGTACATGAAGCGC', 'TCGCGTTCAGGCGCATTAAGTTAGTCGGAG',
                           'ACGATAGTGTACATGAAGCGCTACGTCTTA', 'GATGGGATTCCACTGCTCTGGTCGCGTTCA',
                           'TTCAGGCGCATTAAGTTAGTCGGAGCACAC', 'AGTTAGTCGGAGCACACGATAGTGTACATG',
                           'TCGGAGCACACGATAGTGTACATGAAGCGC', 'TAGTGTACATGAAGCGCTACGTCTTATTGC',
                           'GATTCCACTGCTCTGGTCGCGTTCAGGCGC', 'TGTACATGAAGCGCTACGTCTTATTGCGCT',
                           'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT', 'TTAGTCGGAGCACACGATAGTGTACATGAA',
                           'TACATGAAGCGCTACGTCTTATTGCGCTGG', 'GATTCCACTGCTCTGGTCGCGTTCAGGCGC',
                           'AGTCGGAGCACACGATAGTGTACATGAAGC', 'TAGTGTACATGAAGCGCTACGTCTTATTGC',
                           'CACTAAGATGGGATTCCACTGCTCTGGTCG', 'GATAGTGTACATGAAGCGCTACGTCTTATT',
                           'TGGTCGCGTTCAGGCGCATTAAGTTAGTCG', 'AAGTTAGTCGGAGCACACGATAGTGTACAT',
                           'AGTGTACATGAAGCGCTACGTCTTATTGCG', 'AAGATGGGATTCCACTGCTCTGGTCGCGTT',
                           'GGCGCATTAAGTTAGTCGGAGCACACGATA', 'AAGATGGGATTCCACTGCTCTGGTCGCGTT',
                           'ACACGATAGTGTACATGAAGCGCTACGTCT', 'CACTAAGATGGGATTCCACTGCTCTGGTCG',
                           'AAGTTAGTCGGAGCACACGATAGTGTACAT', 'GTTCAGGCGCATTAAGTTAGTCGGAGCACA',
                           'CTGCTCTGGTCGCGTTCAGGCGCATTAAGT', 'GGGATTCCACTGCTCTGGTCGCGTTCAGGC',
                           'GTCGGAGCACACGATAGTGTACATGAAGCG', 'GGAGCACACGATAGTGTACATGAAGCGCTA',
                           'ACTAAGATGGGATTCCACTGCTCTGGTCGC', 'GATAGTGTACATGAAGCGCTACGTCTTATT',
                           'CATTAAGTTAGTCGGAGCACACGATAGTGT', 'GATGGGATTCCACTGCTCTGGTCGCGTTCA',
                           'AGTGTACATGAAGCGCTACGTCTTATTGCG', 'TCGGAGCACACGATAGTGTACATGAAGCGC',
                           'ACACGATAGTGTACATGAAGCGCTACGTCT', 'ACTGCTCTGGTCGCGTTCAGGCGCATTAAG',
                           'ACGATAGTGTACATGAAGCGCTACGTCTTA', 'GCACACGATAGTGTACATGAAGCGCTACGT',
                           'GATAGTGTACATGAAGCGCTACGTCTTATT', 'TCGCGTTCAGGCGCATTAAGTTAGTCGGAG',
                           'CTGCTCTGGTCGCGTTCAGGCGCATTAAGT', 'GTACATGAAGCGCTACGTCTTATTGCGCTG',
                           'ATTAAGTTAGTCGGAGCACACGATAGTGTA', 'CACACGATAGTGTACATGAAGCGCTACGTC',
                           'GGGATTCCACTGCTCTGGTCGCGTTCAGGC', 'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT',
                           'TCTGGTCGCGTTCAGGCGCATTAAGTTAGT', 'AGATGGGATTCCACTGCTCTGGTCGCGTTC',
                           'ATAGTGTACATGAAGCGCTACGTCTTATTG', 'AGGCGCATTAAGTTAGTCGGAGCACACGAT',
                           'ACGATAGTGTACATGAAGCGCTACGTCTTA', 'AGGCGCATTAAGTTAGTCGGAGCACACGAT',
                           'TCAGGCGCATTAAGTTAGTCGGAGCACACG', 'CGCGTTCAGGCGCATTAAGTTAGTCGGAGC',
                           'GGATTCCACTGCTCTGGTCGCGTTCAGGCG', 'TGGGATTCCACTGCTCTGGTCGCGTTCAGG',
                           'TAAGATGGGATTCCACTGCTCTGGTCGCGT', 'ACGATAGTGTACATGAAGCGCTACGTCTTA',
                           'GAGCACACGATAGTGTACATGAAGCGCTAC', 'ATTCCACTGCTCTGGTCGCGTTCAGGCGCA',
                           'GCTCTGGTCGCGTTCAGGCGCATTAAGTTA', 'AGCACACGATAGTGTACATGAAGCGCTACG',
                           'GCGTTCAGGCGCATTAAGTTAGTCGGAGCA', 'CGCGTTCAGGCGCATTAAGTTAGTCGGAGC',
                           'GTCGGAGCACACGATAGTGTACATGAAGCG', 'GATTCCACTGCTCTGGTCGCGTTCAGGCGC',
                           'TAAGATGGGATTCCACTGCTCTGGTCGCGT', 'GATTCCACTGCTCTGGTCGCGTTCAGGCGC',
                           'TAGTCGGAGCACACGATAGTGTACATGAAG', 'AAGTTAGTCGGAGCACACGATAGTGTACAT',
                           'TCGGAGCACACGATAGTGTACATGAAGCGC', 'ACGATAGTGTACATGAAGCGCTACGTCTTA',
                           'TAGTCGGAGCACACGATAGTGTACATGAAG', 'TTAGTCGGAGCACACGATAGTGTACATGAA',
                           'CACACGATAGTGTACATGAAGCGCTACGTC', 'GCACACGATAGTGTACATGAAGCGCTACGT',
                           'TCGGAGCACACGATAGTGTACATGAAGCGC', 'AGCACACGATAGTGTACATGAAGCGCTACG',
                           'ACACGATAGTGTACATGAAGCGCTACGTCT', 'CACACGATAGTGTACATGAAGCGCTACGTC',
                           'AGATGGGATTCCACTGCTCTGGTCGCGTTC', 'CGTTCAGGCGCATTAAGTTAGTCGGAGCAC',
                           'TAGTGTACATGAAGCGCTACGTCTTATTGC', 'GATGGGATTCCACTGCTCTGGTCGCGTTCA',
                           'TAGTCGGAGCACACGATAGTGTACATGAAG', 'TGGTCGCGTTCAGGCGCATTAAGTTAGTCG',
                           'AGTCGGAGCACACGATAGTGTACATGAAGC', 'CCACTGCTCTGGTCGCGTTCAGGCGCATTA',
                           'CTCTGGTCGCGTTCAGGCGCATTAAGTTAG', 'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT',
                           'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT', 'TAAGATGGGATTCCACTGCTCTGGTCGCGT',
                           'TGCTCTGGTCGCGTTCAGGCGCATTAAGTT', 'GCATTAAGTTAGTCGGAGCACACGATAGTG',
                           'GCGTTCAGGCGCATTAAGTTAGTCGGAGCA', 'ATTCCACTGCTCTGGTCGCGTTCAGGCGCA',
                           'GTGTACATGAAGCGCTACGTCTTATTGCGC', 'ATAGTGTACATGAAGCGCTACGTCTTATTG',
                           'TAAGATGGGATTCCACTGCTCTGGTCGCGT', 'GTTCAGGCGCATTAAGTTAGTCGGAGCACA',
                           'GATTCCACTGCTCTGGTCGCGTTCAGGCGC', 'TAGTGTACATGAAGCGCTACGTCTTATTGC',
                           'AGCACACGATAGTGTACATGAAGCGCTACG', 'ATGGGATTCCACTGCTCTGGTCGCGTTCAG',
                           'GTTAGTCGGAGCACACGATAGTGTACATGA', 'TAAGTTAGTCGGAGCACACGATAGTGTACA',
                           'TGTACATGAAGCGCTACGTCTTATTGCGCT', 'TTAGTCGGAGCACACGATAGTGTACATGAA',
                           'GGTCGCGTTCAGGCGCATTAAGTTAGTCGG', 'AGTCGGAGCACACGATAGTGTACATGAAGC',
                           'GGTCGCGTTCAGGCGCATTAAGTTAGTCGG', 'GAGCACACGATAGTGTACATGAAGCGCTAC',
                           'AGTTAGTCGGAGCACACGATAGTGTACATG', 'ACACGATAGTGTACATGAAGCGCTACGTCT',
                           'GCACACGATAGTGTACATGAAGCGCTACGT', 'CTCTGGTCGCGTTCAGGCGCATTAAGTTAG',
                           'GCTCTGGTCGCGTTCAGGCGCATTAAGTTA', 'AGTGTACATGAAGCGCTACGTCTTATTGCG',
                           'GTTCAGGCGCATTAAGTTAGTCGGAGCACA', 'TCAGGCGCATTAAGTTAGTCGGAGCACACG',
                           'GCACTAAGATGGGATTCCACTGCTCTGGTC']
        self.assertListEqual(fileToList(filename), candidate1_list)

    def test009_openFileCan2(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('can2.txt')
        tar2_exists = isfile(filename)
        self.assertTrue(tar2_exists, 'Could not find file: "can2.txt", did you move or delete it?')
        candidate2_list = ['CCACGGGAATCCATAGTCAGAAATAGTATC', 'ACGACCGTTAACCACATTACCCCGTGGTCG',
                           'ACCCCTAGCCGGCCGATAGAGTGTAAGGAT', 'CGTCGACAGACCACGTTATTTCATTCGGCG',
                           'CCCTAGCCGGCCGATAGAGTGTAAGGATAG', 'TATGAACTTCGGCGGGTACATATGGACTAT',
                           'AGTCAGTGTAAGGTTAACTCCGCATTAGAA', 'AGGCTATGCGCAAGAAAAGCCATACTTCTT',
                           'CTGTCTTCGCCGGGCTCTATTACGGTCGCT', 'AGGGCCTGGAGACAGTCAGTGTAAGGTTAA',
                           'AACGGAGACGCTTTGCCGTACGACTGACCC', 'CACGGTTATGGCTTCTAGCGGTCTTCACCC',
                           'AGGCGTCCCTCCTTAGAGGCCAGGTGTCCG', 'GTTTGCGTCTGGAGGATGAAGCACTATACG',
                           'CTGTGTATGAACTTCGGCGGGTACATATGG', 'CGGTCTTCACCCCCCCAGGCAAGTAGCTTC',
                           'TAATGTCCATGGTGATACCCCTAGCCGGCC', 'CACCCCCCCAGGCAAGTAGCTTCACGCTGA',
                           'GCGTTTCAGAGCATTAATCGGGGGCCGTGT', 'CCCGACACCGGCCTTGCAGGCTATGCGCAA',
                           'GACCCCAAGGGGCGATATTGCACGACCGTT', 'TCGAGCGATAATTGGTGTTCGTTACAGCGT',
                           'GGATAGCAGACCCCCACCTTCGTAAAACAA', 'CCCTCCTTAGAGGCCAGGTGTCCGAACTTC',
                           'TCAGAAATAGTATCACTCCTTATTCCGACT', 'CCCGTGTTAGGCGTCCCTCCTTAGAGGCCA',
                           'GTCTCTTGCGCTTAAATAATCCAGCATCGC', 'CTCCCGTCGACAGACCACGTTATTTCATTC',
                           'CAGACCACGTTATTTCATTCGGCGTTTCTC', 'TAGTATCACTCCTTATTCCGACTCAGAAAG',
                           'CGGACGACCTCTAGGATGTACTACCCTACT', 'ACCGAGAACCGCGGTTATAATTTCACATTA',
                           'CAGTGTAAGGTTAACTCCGCATTAGAAGCC', 'ATGGCTTCTAGCGGTCTTCACCCCCCCAGG',
                           'CGAGAACCGCGGTTATAATTTCACATTATT', 'GCATCGCCTAGCAAAGCAGCTTACGTTCAG',
                           'CAAATCTCACTAATGTCCATGGTGATACCC', 'GGGAATCCATAGTCAGAAATAGTATCACTC',
                           'GTTTGCGTCTGGAGGATGAAGCACTATACG']
        self.assertListEqual(fileToList(filename), candidate2_list)

    def test010_openFileSolEasy(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('sol_easy.txt')
        tar_easy_exists = isfile(filename)
        self.assertTrue(tar_easy_exists, 'Could not find file: "sol_easy.txt", did you move or delete it?')
        self.assertListEqual(fileToList(filename), ['ABCDEFGHH'])

    def test011_openFileSol0(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('sol0.txt')
        tar0_exists = isfile(filename)
        self.assertTrue(tar0_exists, 'Could not find file: "sol0.txt", did you move or delete it?')
        self.assertListEqual(fileToList(filename),
                             ['TTATAGTGATATACGTGCTTAGGTAGTGCAGAGACACAACTTATAGAGTGAGGCCAGCTCACGAGCTCTAGAAGCCCAAATTGCTACTGTGCCGCTGCGCACCGCATGATCGCAGTCAG'])

    def test012_openFileSol1(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('sol1.txt')
        tar1_exists = isfile(filename)
        self.assertTrue(tar1_exists, 'Could not find file: "sol1.txt", did you move or delete it?')
        self.assertListEqual(fileToList(filename), ['GTCGCGTTCAGGCGCATTAAGTTAGTCGGAG'])

    def test013_openFileSol2(self):
        from dnaSequencing import fileToList
        filename = createDataFiles.fullPath('sol2.txt')
        tar2_exists = isfile(filename)
        self.assertTrue(tar2_exists, 'Could not find file: "sol2.txt", did you move or delete it?')
        self.assertListEqual(fileToList(filename), ['CATTATTATGAGGTTTCCCTCCCTAAACTTATGAACTTCGGCGGGTACATATGGACTAT'])

    def test014_emptyFile(self):
        from dnaSequencing import fileToList
        strings = []
        filename = 'empty.txt'
        filepath = createDataFiles.fullPath(filename)
        createDataFiles.listToFile(strings, filename)
        self.extrafiles.append(filepath)
        self.assertListEqual(fileToList(filepath), strings)

    def test015_extraTests(self):
        from string import ascii_uppercase as letters
        from random import randint, choice
        from dnaSequencing import fileToList
        for i in range(20):
            strings = [''.join([choice(letters) for _ in range(randint(0,100))]) for _ in range(randint(0,100))]
            filename = ''.join([choice(letters) for _ in range(10)]) + '.txt'
            filepath = createDataFiles.fullPath(filename)
            createDataFiles.listToFile(strings, filename)
            self.extrafiles.append(filepath)
            self.assertListEqual(fileToList(filepath), strings)

    def test016_fileDoesNotExist(self):
        from string import ascii_uppercase as letters
        from random import choice
        from dnaSequencing import fileToList
        strings = []
        filename = 'fake'+''.join([choice(letters) for _ in range(10)]) + '.txt'
        try:
            self.assertListEqual(fileToList(filename), strings)
        except FileNotFoundError:
            # need to catch FileNotFoundErrors because it will report
            # "ERROR" for the test instead of "FAIL"
            self.fail('What should happen if a file does not exist?')

if __name__ == '__main__':
    unittest.main()
