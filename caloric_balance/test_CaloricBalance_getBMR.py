"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import sys
if sys.version_info.major != 3:
    print('You must use Python 3.x version to run this unit test')
    sys.exit(1)

import unittest
import math

import caloric_balance

from test_CaloricBalance_init import TestCaloricBalanceInit


class TestCaloricBalanceGetBMR(unittest.TestCase):
    def test001_getBMRExists(self):
        self.assertTrue('getBMR' in dir(caloric_balance.CaloricBalance),
                        'Function "getBMR" is not defined, check your spelling')

    def test002_testGetBMRFemale(self):
        from caloric_balance import CaloricBalance
        cb = CaloricBalance('f', 23.0, 65.0, 130.0)

        bmr = cb.getBMR('f', 23.0, 65.0, 130.0)
        expected = 1417.9

        self.assertAlmostEqual(bmr, expected, 2, 'Your result (%s) is not close enough to (%s)' % (bmr, expected))

    def test003_testGetBMRMale(self):
        from caloric_balance import CaloricBalance
        cb = CaloricBalance('m', 26.0, 70.5, 185.0)

        bmr = cb.getBMR('m', 26.0, 70.5, 185.0)
        expected = 1937.1

        self.assertAlmostEqual(bmr, expected, 2, 'Your result (%s) is not close enough to (%s)' % (bmr, expected))

    def test004_testGetBMRError(self):
        from caloric_balance import CaloricBalance
        cb = CaloricBalance('x', 26.0, 70.5, 185.0)

        bmr = cb.getBMR('x', 26.0, 70.5, 185.0)
        expected = 0.0

        self.assertEqual(bmr, expected, 'Your result (%s) is not equal to (%s)' % (bmr, expected))

    def test005_bmrIsSaved(self):
        from caloric_balance import CaloricBalance
        cb = CaloricBalance('f', 23.0, 65.0, 130.0)
        datamembers = cb.__dict__

        bmrFlag = False
        for k in datamembers:
            try:
                if math.isclose(datamembers[k], -1417.9, abs_tol=0.005):
                    bmrFlag = True
            except:
                #not a real number
                pass
        self.assertTrue(bmrFlag, 'The updated caloric balance was not found as a datamember. Did you remember to subtract the BMR?')

    def test006_bmrIsSaved(self):
        from caloric_balance import CaloricBalance
        cb = CaloricBalance('m', 26.0, 70.5, 185.0)
        datamembers = cb.__dict__

        bmrFlag = False
        for k in datamembers:
            try:
                if math.isclose(datamembers[k], -1937.1, abs_tol=0.005):
                    bmrFlag = True
            except:
                #not a real number
                pass
        self.assertTrue(bmrFlag, 'The updated caloric balance was not found as a datamember. Did you remember to subtract the BMR?')

    def test007_bmrIsSaved(self):
        from caloric_balance import CaloricBalance
        cb = CaloricBalance('x', 26.0, 70.5, 185.0)
        datamembers = cb.__dict__

        bmrFlag = False
        for k in datamembers:
            if datamembers[k] == 0.0:
                bmrFlag = True
        self.assertTrue(bmrFlag,
                        'The updated caloric balance was not found as a datamember. Did you remember to subtract the BMR?')

if __name__ == '__main__':
    unittest.main()
