"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import sys
if sys.version_info.major != 3:
    print('You must use Python 3.x version to run this unit test')
    sys.exit(1)

import unittest
import re
import random

import main

class TestRecordActivityAction(unittest.TestCase):
    def input_replacement(self, prompt):
        self.assertFalse(self.too_many_inputs)
        self.input_given_prompt = prompt
        r = self.input_response_list[self.input_response_index]
        self.input_response_index += 1
        if self.input_response_index >= len(self.input_response_list):
            self.input_response_index = 0
            self.too_many_inputs = True
        return r

    def print_replacement(self, *text, **kwargs):
        line = " ".join(text) + "\n"
        self.printed_lines.append(line)

    def setUp(self):
        self.too_many_inputs = False
        self.input_given_prompt = None
        self.input_response_index = 0
        self.input_response_list = [""]
        main.input = self.input_replacement

        self.printed_lines = []
        main.print = self.print_replacement

    def checkOption(self, menu, option):
        from main import recordActivityAction
        from caloric_balance import CaloricBalance

        self.setUp()

        cb = CaloricBalance('f', 23.0, 65.0, 130.0)
        expected = -1417.9
        actual = cb.getBalance()
        self.assertAlmostEqual(actual, expected, 2,
            'Your result (%s) is not close enough to (%s)' % (actual, expected))

        self.input_response_list = [option, "twleve", "zero", "0", "0", "-1", "-17", "55"]
        recordActivityAction(cb)

        actual2 = cb.getBalance()
        self.assertNotEqual(actual, actual2,
            'Your recordActivityAction with option "%s" did not update the caloric balance.' % option)

        printed_lines = self.printed_lines
        lines = "    ".join(printed_lines)
        expression = "caloric.*balance.*(-[0-9]+\.[0-9]+)"
        matches = re.findall(expression, lines.lower())
        self.assertTrue(
            len(matches) >= 1,
            'You did not print the updated caloric balance to the user?\n' +
            'Your printed message should contain the words "caloric", "balance", and the updated balance.\n' +
            'You printed (we entered some bad values for minutes):\n    %s' % lines
        )

    def test001_recordActivityActionExists(self):
        self.assertTrue('recordActivityAction' in dir(main),
                        'Function "recordActivityAction" is not defined, check your spelling')

    def test002_recordActivityAction_Activity1_UpdatesBalance(self):
        from main import formatActivityMenu

        menu = formatActivityMenu()
        options = []
        for line in menu:
            matches = re.findall("\[([a-z0-9]+)\]", line)
            if len(matches) > 0:
                options += matches

        self.assertGreaterEqual(len(options), 4,
            'Unable to find at least 4 options to choose from. Check your formatActivityMenu function')

        self.checkOption(menu, options[0])

    def test003_recordActivityAction_Activity2_UpdatesBalance(self):
        from main import formatActivityMenu

        menu = formatActivityMenu()
        options = []
        for line in menu:
            matches = re.findall("\[([a-z0-9]+)\]", line)
            if len(matches) > 0:
                options += matches

        self.assertGreaterEqual(len(options), 4,
            'Unable to find at least 4 options to choose from. Check your formatActivityMenu function')

        self.checkOption(menu, options[1])


    def test004_recordActivityAction_Activity3_UpdatesBalance(self):
        from main import formatActivityMenu

        menu = formatActivityMenu()
        options = []
        for line in menu:
            matches = re.findall("\[([a-z0-9]+)\]", line)
            if len(matches) > 0:
                options += matches

        self.assertGreaterEqual(len(options), 4,
            'Unable to find at least 4 options to choose from. Check your formatActivityMenu function')

        self.checkOption(menu, options[2])

    def test005_recordActivityAction_Activity4_UpdatesBalance(self):
        from main import formatActivityMenu

        menu = formatActivityMenu()
        options = []
        for line in menu:
            matches = re.findall("\[([a-z0-9]+)\]", line)
            if len(matches) > 0:
                options += matches

        self.assertGreaterEqual(len(options), 4,
            'Unable to find at least 4 options to choose from. Check your formatActivityMenu function')

        self.checkOption(menu, options[3])

    def test006_recordActivityAction_RandomActivityChoice_UpdatesBalance(self):
        from main import formatActivityMenu

        menu = formatActivityMenu()
        options = []
        for line in menu:
            matches = re.findall("\[([a-z0-9]+)\]", line)
            if len(matches) > 0:
                options += matches

        self.assertGreaterEqual(len(options), 4,
            'Unable to find at least 4 options to choose from. Check your formatActivityMenu function')

        self.checkOption(menu, random.choice(options))

    def test007_recordActivityAction_AllOptions_UpdatesBalance(self):
        from main import formatActivityMenu

        menu = formatActivityMenu()
        options = []
        for line in menu:
            matches = re.findall("\[([a-z0-9]+)\]", line)
            if len(matches) > 0:
                options += matches

        self.assertGreaterEqual(len(options), 4,
            'Unable to find at least 4 options to choose from. Check your formatActivityMenu function')

        for option in options:
            self.checkOption(menu, option)

    def test008_recordActivityAction_badOption(self):
        from main import recordActivityAction
        from main import formatActivityMenu
        from caloric_balance import CaloricBalance

        menu = formatActivityMenu()
        options = []
        for line in menu:
            matches = re.findall("\[([a-z0-9]+)\]", line)
            if len(matches) > 0:
                options += matches

        self.assertGreaterEqual(len(options), 4,
            'Unable to find at least 4 options to choose from. Check your formatActivityMenu function')

        # join all the options together to get a bad option
        joinedoption = "".join(options)

        cb = CaloricBalance('f', 23.0, 65.0, 130.0)
        expected = -1417.9
        actual = cb.getBalance()
        self.assertAlmostEqual(actual, expected, 2,
            'Your result (%s) is not close enough to (%s)' % (actual, expected))

        self.input_response_list = [joinedoption]
        recordActivityAction(cb)

        actual2 = cb.getBalance()
        self.assertEqual(actual, actual2,
            'Your recordActivityAction should not have updated the caloric balance, because the user gave a bad option')

        printed_lines = self.printed_lines
        self.assertGreaterEqual(len(printed_lines), len(menu)+1, 'You did not print an error message to the user.')


if __name__ == '__main__':
    unittest.main()
