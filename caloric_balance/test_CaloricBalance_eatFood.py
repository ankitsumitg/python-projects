"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import sys
if sys.version_info.major != 3:
    print('You must use Python 3.x version to run this unit test')
    sys.exit(1)

import unittest

import caloric_balance


class TestCaloricBalanceEatFood(unittest.TestCase):
    def test001_eatFoodExists(self):
        self.assertTrue('eatFood' in dir(caloric_balance.CaloricBalance),
                        'Function "eatFood" is not defined, check your spelling')

    def test002_eatFood(self):
        from caloric_balance import CaloricBalance
        cb = CaloricBalance('f', 23.0, 65.0, 130.0)

        balance = cb.getBalance()
        expected = -1417.9
        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))

        cb.eatFood(400)
        balance = cb.getBalance()
        expected = -1017.9
        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))

        cb.eatFood(906)
        balance = cb.getBalance()
        expected = -111.9
        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))

    def test003_eatFood(self):
        from caloric_balance import CaloricBalance
        cb = CaloricBalance('f', 27.0, 74.0, 155.0)

        balance = cb.getBalance()
        expected = -1550.15
        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))

        cb.eatFood(600)
        balance = cb.getBalance()
        expected = -950.15
        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))

        cb.eatFood(800)
        balance = cb.getBalance()
        expected = -150.15
        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))

    def test004_eatFood(self):
        from caloric_balance import CaloricBalance
        cb = CaloricBalance('m', 26.0, 70.5, 185.0)

        balance = cb.getBalance()
        expected = -1937.1

        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))

        cb.eatFood(250)
        balance = cb.getBalance()
        expected = -1687.1
        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))

        cb.eatFood(508)
        balance = cb.getBalance()
        expected = -1179.1
        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))

    def test005_eatFood(self):
        from caloric_balance import CaloricBalance
        cb = CaloricBalance('m', 35.0, 76.0, 275.0)

        balance = cb.getBalance()
        expected = -2506.45

        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))

        cb.eatFood(500)
        balance = cb.getBalance()
        expected = -2006.45
        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))

        cb.eatFood(600)
        balance = cb.getBalance()
        expected = -1406.45
        self.assertAlmostEqual(balance, expected, 2,
                               'Your result (%s) is not close enough to (%s)' % (balance, expected))


if __name__ == '__main__':
    unittest.main()
